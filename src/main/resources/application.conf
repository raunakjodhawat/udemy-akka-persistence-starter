akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/rtjvm/journal"

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/rtjvm/snapshots"

localStores {
  akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
  akka.persistence.journal.leveldb.dir = "target/localStores/journal"

  akka.persistence.journal.leveldb.compaction-intervals {
    simple-persistent-actor = 1000
    "*" = 5000
  }

  akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  akka.persistence.snapshot-store.local.dir = "target/localStores/snapshots"
}

postgresDemo {
  akka.persistence.journal.plugin = "jdbc-journal"
  akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

  akka-persistence-jdbc {
    shared-databases {
      slick {
        profile = "slick.jdbc.PostgresProfile$"
        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5832/rtjvm"
          user = "docker"
          password = "docker"
        }
      }
    }
  }

  jdbc-journal {
    use-shared-db = "slick"
  }

  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}

cassandraDemo {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
}

customSerializerDemo {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
    akka.actor {
        serializers {
            java = "akka.serialization.JavaSerializer"
            rtvjm = "part3_stores_serialization.UserRegisterationSerializer"
        }
        serialization-bindings {
            "part3_stores_serialization.UserRegistered" = rtvjm
        }
    }
}

eventAdaptors {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
            guitar-inventory-enhancer = "part4_practices.EventAdaptors$GuitarReadEventAdapter"
        }
    event-adapter-bindings {
        "part4_practices.EventAdaptors$GuitarAdded" = guitar-inventory-enhancer
      }
    }
}

detachingModels {
      akka.persistence.journal.plugin = "cassandra-journal"
      akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

      cassandra-journal {
        event-adapters {
          detach-adapter = "part4_practices.ModelAdaptor"
        }

        event-adapter-bindings {
            "part4_practices.DomainModel$CouponApplied" = detach-adapter
            "part4_practices.DataModel$WrittenCouponApplied" = detach-adapter
            "part4_practices.DataModel$WrittenCouponAppliedV2" = detach-adapter
        }
      }
}

persistence-query {
    akka.persistence.journal.plugin = "cassandra-journal"
    akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
          tagging-adapter = "part4_practices.PersistenceQueryDemo$MusicStoreEventAdaptor"
        }
        event-adapter-bindings {
            "part4_practices.PersistenceQueryDemo$PlayListPurchased" = tagging-adapter
        }
    }
}